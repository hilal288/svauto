heat_template_version: 2013-05-23

description: >

  HOT template to create Sandvine Stack, it have an Instance acting as a L2 Bridge between two VXLAN networks.


  We have 3 Instances:


  * PTS - CentOS 7

  * SDE - CentOS 7

  * SPB - CentOS 6


  We want to wire them as:

  -------|ctrl_subnet|------------- Control Network (with Internet access via router_i0)
      |        |        |
     ---      ---      ---
     | |      | |      | |
     |S|      |S|      |S|
     |V|      |V|      |V|
     |S|      |S|      |P|
     |P|      |D|      |T|
     |B|      |E|      |S|
     | |      | |------| |
     | |      | |      | |
     | |      | |------| |
     | |      | |      | |
     ---      ---      - -
      |        |        |
      --|service_subnet|------  <-- Service Network (not routed - no gateway)

parameters:
  ssh_key:
    type: string
    label: "Your SSH keypair name (pre-create please!)"
    description: |
        If you have not created your key, please go to
        Project/Compute/Access & Security, and either import
        one or create one. If you create it, make sure you keep
        the downloaded file (as you don't get a second chance)
    default: default

  public_network:
    type: string
    label: Public External Network
    description: Public Network with Floating IP addresses
    default: "ext-net"

  pts_image:
    type: string
    label: "PTS Image (default '{{pts_image}}')"
    description: "PTS Image"
    default: "{{pts_image}}"

  sde_image:
    type: string
    label: "SDE Image (default '{{sde_image}}')"
    description: "SDE Image"
    default: "{{sde_image}}"

  spb_image:
    type: string
    label: "SPB Image (default '{{spb_image}}')"
    description: "SPB Image"
    default: "{{spb_image}}"

resources:
  rtr:
    type: OS::Neutron::Router
    properties:
      admin_state_up: True
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-rtr' } }
      external_gateway_info:
        network: { get_param: public_network }

  router_i0:
    type: OS::Neutron::RouterInterface
    properties:
      router: { get_resource: rtr }
      subnet: { get_resource: ctrl_subnet }

  router_i1:
    type: OS::Neutron::RouterInterface
    properties:
      router: { get_resource: rtr }
      subnet: { get_resource: data_int_subnet1 }

  floating_ip_1:
    type: OS::Neutron::FloatingIP
    depends_on: router_i0
    properties:
      floating_network: { get_param: public_network }

  floating_ip_2:
    type: OS::Neutron::FloatingIP
    depends_on: router_i0
    properties:
      floating_network: { get_param: public_network }

  floating_ip_3:
    type: OS::Neutron::FloatingIP
    depends_on: router_i0
    properties:
      floating_network: { get_param: public_network }

  sde_ctrl_sec:
    type: OS::Neutron::SecurityGroup
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-sde-ctrl-rules' } }
      rules:
        - protocol: icmp
        - protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - protocol: tcp
          port_range_min: 80
          port_range_max: 80
        - protocol: tcp
          port_range_min: 443
          port_range_max: 443
        - protocol: tcp
          port_range_min: 777
          port_range_max: 777
        - protocol: tcp
          port_range_min: 4739
          port_range_max: 4739
        - protocol: udp
          port_range_min: 52000
          port_range_max: 52256
          
  sde_srvc_sec:
    type: OS::Neutron::SecurityGroup
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-sde-srvc-rules' } }
      rules:
        - protocol: icmp
        - protocol: tcp
          port_range_min: 1
          port_range_max: 65535
        - protocol: udp
          port_range_min: 1
          port_range_max: 65535

  spb_ctrl_sec:
    type: OS::Neutron::SecurityGroup
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-spb-ctrl-rules' } }
      rules:
        - protocol: icmp
        - protocol: tcp
          port_range_min: 22
          port_range_max: 22

  spb_srvc_sec:
    type: OS::Neutron::SecurityGroup
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-spb-srvc-rules' } }
      rules:
        - protocol: icmp
        - protocol: tcp
          port_range_min: 1
          port_range_max: 65535
        - protocol: udp
          port_range_min: 1
          port_range_max: 65535

  pts_ctrl_sec:
    type: OS::Neutron::SecurityGroup
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-pts-ctrl-rules' } }
      rules:
        - protocol: icmp
        - protocol: tcp
          port_range_min: 22
          port_range_max: 22

  pts_srvc_sec:
    type: OS::Neutron::SecurityGroup
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-pts-srvc-rules' } }
      rules:
        - protocol: icmp
        - protocol: tcp
          port_range_min: 1
          port_range_max: 65535
        - protocol: udp
          port_range_min: 1
          port_range_max: 65535

  ctrl_net:
    type: OS::Neutron::Net
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-control' } }

  ctrl_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-control' } }
      dns_nameservers: [8.8.4.4, 8.8.8.8]
      network: { get_resource: ctrl_net }
      enable_dhcp: True
      cidr: 192.168.192.0/25
      allocation_pools:
        - start: 192.168.192.50
          end: 192.168.192.126

  service_net:
    type: OS::Neutron::Net
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-service' } }

  service_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-service' } }
      network: { get_resource: service_net }
      enable_dhcp: True
      cidr: 192.168.192.128/25
      gateway_ip: ""

  data_sub_net1:
    type: OS::Neutron::Net
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-subscribers-ns1' } }

  data_real_subnet1:
    type: OS::Neutron::Subnet
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-subscribers-ss1' } }
      dns_nameservers: [8.8.4.4, 8.8.8.8]
      network: { get_resource: data_sub_net1 }
      enable_dhcp: True
      cidr: 10.192.0.0/16
      gateway_ip: 10.192.0.1
      allocation_pools:
        - start: 10.192.0.50
          end: 10.192.255.254

  data_int_net1:
    type: OS::Neutron::Net
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-subscribers-ni1' } }

  data_int_subnet1:
    type: OS::Neutron::Subnet
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-subscribers-si1' } }
      network: { get_resource: data_int_net1 }
      enable_dhcp: True
      cidr: 10.192.0.0/16
      allocation_pools:
        - start: 10.192.0.2
          end: 10.192.0.49

  spb_ctrl_port:
    type: OS::Neutron::Port
    properties:
      name: {"Fn::Join": ["-", [{ get_param: "OS::stack_name" } , "spb-port"]]}
      network: { get_resource: ctrl_net }
      fixed_ips:
        - ip_address: 192.168.192.10
      security_groups:
        - { get_resource: spb_ctrl_sec }

  spb_floating_ip_assoc:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: floating_ip_3 }
      port_id: { get_resource: spb_ctrl_port }

  sde_ctrl_port:
    type: OS::Neutron::Port
    properties:
      name: {"Fn::Join": ["-", [{ get_param: "OS::stack_name" } , "sde-port"]]}
      network: { get_resource: ctrl_net }
      fixed_ips:
        - ip_address: 192.168.192.20
      security_groups:
        - { get_resource: sde_ctrl_sec }

  sde_floating_ip_assoc:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: floating_ip_2 }
      port_id: { get_resource: sde_ctrl_port }

  pts_ctrl_port:
    type: OS::Neutron::Port
    properties:
      name: {"Fn::Join": ["-", [{ get_param: "OS::stack_name" } , "pts-port"]]}
      network: { get_resource: ctrl_net }
      fixed_ips:
        - ip_address: 192.168.192.30
      security_groups:
        - { get_resource: pts_ctrl_sec }

  pts_floating_ip_assoc:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: floating_ip_1 }
      port_id: { get_resource: pts_ctrl_port }

  spb_srvc_port:
    type: OS::Neutron::Port
    properties:
      name: {"Fn::Join": ["-", [{ get_param: "OS::stack_name" } , "spb-port"]]}
      network: { get_resource: service_net }
      fixed_ips:
        - ip_address: 192.168.192.130

  sde_srvc_port:
    type: OS::Neutron::Port
    properties:
      name: {"Fn::Join": ["-", [{ get_param: "OS::stack_name" } , "sde-port"]]}
      network: { get_resource: service_net }
      fixed_ips:
       - ip_address: 192.168.192.140
 
  pts_srvc_port:
    type: OS::Neutron::Port
    properties:
      name: {"Fn::Join": ["-", [{ get_param: "OS::stack_name" } , "pts-port"]]}
      network: { get_resource: service_net }
      fixed_ips:
        - ip_address: 192.168.192.150

  pts_port_int_net1:
    type: OS::Neutron::Port
    properties:
      name: {"Fn::Join": ["-", [{ get_param: "OS::stack_name" } , "pts-i1-port"]]}
      network: { get_resource: data_int_net1 }
      port_security_enabled: False

  pts_port_sub_net1:
    type: OS::Neutron::Port
    properties:
      name: {"Fn::Join": ["-", [{ get_param: "OS::stack_name" } , "pts-s1-port"]]}
      network: { get_resource: data_sub_net1 }
      port_security_enabled: False

  sde_port_int_net1:
    type: OS::Neutron::Port
    properties:
      name: {"Fn::Join": ["-", [{ get_param: "OS::stack_name" } , "sde-i1-port"]]}
      network: { get_resource: data_int_net1 }
      port_security_enabled: False

  sde_port_sub_net1:
    type: OS::Neutron::Port
    properties:
      name: {"Fn::Join": ["-", [{ get_param: "OS::stack_name" } , "sde-s1-port"]]}
      network: { get_resource: data_sub_net1 }
      port_security_enabled: False

  pts_1:
    type: OS::Nova::Server
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-pts-1' } }
      key_name: { get_param: 'ssh_key' }
      image: { get_param: 'pts_image' }
      flavor: "m1.small"
      networks:
        - port: { get_resource: pts_ctrl_port }
        - port: { get_resource: pts_srvc_port }
        - port: { get_resource: pts_port_sub_net1 }
        - port: { get_resource: pts_port_int_net1 }
      user_data_format: RAW
      user_data: |
        #cloud-config
        system_info:
          default_user:
            name: "sandvine"
        chpasswd:
          list: |
            root:sandvine
            sandvine:sandvine
          expire: False
        runcmd:
        - 'su -c "\curl -s https://raw.githubusercontent.com/tmartinx/svauto/dev/scripts/install-svauto.sh | bash -s" sandvine'

  spb_1:
    type: OS::Nova::Server
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-spb-1' } }
      key_name: { get_param: 'ssh_key' }
      image: { get_param: 'spb_image' }
      flavor: "m1.medium"
      networks:
        - port: { get_resource: spb_ctrl_port }
        - port: { get_resource: spb_srvc_port }
      user_data_format: RAW
      user_data: |
        #cloud-config
        system_info:
          default_user:
            name: "sandvine"
        chpasswd:
          list: |
            root:sandvine
            sandvine:sandvine
          expire: False

  sde_1:
    type: OS::Nova::Server
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-sde-1' } }
      key_name: { get_param: 'ssh_key' }
      image: { get_param: 'sde_image' }
      flavor: "m1.medium"
      networks:
        - port: { get_resource: sde_ctrl_port }
        - port: { get_resource: sde_srvc_port }
        - port: { get_resource: sde_port_sub_net1 }
        - port: { get_resource: sde_port_int_net1 }                
      user_data_format: RAW
      user_data: |
        #cloud-config
        system_info:
          default_user:
            name: "sandvine"
        chpasswd:
          list: |
            root:sandvine
            sandvine:sandvine
          expire: False
        runcmd:
        - 'su -c "\curl -s https://raw.githubusercontent.com/tmartinx/svauto/dev/scripts/install-svauto.sh | bash -s" sandvine'

outputs:
